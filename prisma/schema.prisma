// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can change this to your preferred DB
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  DRIVER
  ADMIN
}

enum RideStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
  COMPLETED
}

model User {
  id            String         @id @unique  // External ID from Clerk
  email         String?        @unique
  phoneNumber   String?        @unique
  firstName     String?
  lastName      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Driver specific fields
  driverRating  Float?         // Out of 5
  ridesCompleted Int           @default(0)
  vehicle       Vehicle?

  // Relations
  offeredRides  Ride[]         @relation("DriverRides")
  bookings      Booking[]      @relation("UserBookings")
  sentMessages  Message[]      @relation("SentMessages")
  receivedMessages Message[]   @relation("ReceivedMessages")
  notifications Notification[] @relation("UserNotifications")
  reviews       Review[]       @relation("UserReviews")
  reviewsGiven  Review[]       @relation("ReviewsGiven")
}

model Vehicle {
  id            String   @id @default(cuid())
  make          String
  model         String
  year          Int?
  color         String?
  licensePlate  String?
  userId        String   @unique  // One-to-one relation with User
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Ride {
  id            String      @id @default(cuid())
  driverId      String
  driver        User        @relation("DriverRides", fields: [driverId], references: [id])
  fromLocation  String
  toLocation    String
  departureDate DateTime
  departureTime String
  price         Float
  availableSeats Int
  status        RideStatus  @default(PENDING_APPROVAL)
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Admin approval info
  approvedById  String?
  approvedAt    DateTime?
  
  // Relations
  bookings      Booking[]
}

model Booking {
  id            String        @id @default(cuid())
  rideId        String
  ride          Ride          @relation(fields: [rideId], references: [id])
  userId        String
  user          User          @relation("UserBookings", fields: [userId], references: [id])
  status        BookingStatus @default(PENDING)
  numSeats      Int           @default(1)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Messaging thread for this booking
  messages      Message[]
}

model Message {
  id            String   @id @default(cuid())
  content       String
  senderId      String
  sender        User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId    String
  receiver      User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  bookingId     String?
  booking       Booking? @relation(fields: [bookingId], references: [id])
  read          Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model Notification {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation("UserNotifications", fields: [userId], references: [id])
  type          String   // e.g., "booking_request", "ride_approved", "message"
  title         String
  message       String
  read          Boolean  @default(false)
  relatedId     String?  // Could be a ride ID, booking ID, etc.
  createdAt     DateTime @default(now())
}

model Review {
  id            String   @id @default(cuid())
  rating        Float    // Out of 5
  comment       String?
  authorId      String
  author        User     @relation("ReviewsGiven", fields: [authorId], references: [id])
  userId        String
  user          User     @relation("UserReviews", fields: [userId], references: [id])
  createdAt     DateTime @default(now())
}

// For storing app settings that admins can modify
model Setting {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  description   String?
  updatedAt     DateTime @updatedAt
}

// For filtering and analytics purposes
model FilterOptions {
  id            String   @id @default(cuid())
  name          String   @unique
  displayName   String
  options       Json     // Array of filter options
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}